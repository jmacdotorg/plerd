#!/usr/bin/env perl

use warnings;
use strict;

use FindBin;
use lib
    "$FindBin::Bin/../lib",
;

use YAML qw( LoadFile );
use Getopt::Long;

use Plerd;

my $webmention_enabled = 0;
my $process_webmentions = 0;
my $rebuild_webmentions = 0;
GetOptions(
    'send-webmentions' => \$webmention_enabled,
    'process-webmentions' => \$process_webmentions,
    'rebuild-webmentions' => \$rebuild_webmentions,
);

my $config_ref = eval { LoadFile( "$FindBin::Bin/../conf/plerd.conf" ) };
if (!$config_ref) {
    use Cwd;
    use Path::Class::Dir;
    my $config_path = Path::Class::Dir->new(cwd());
    until ($config_ref) {
        $config_ref = eval { LoadFile("$config_path/conf/plerd.conf") };
        unless ($config_ref) {
            $config_ref = eval { LoadFile("$config_path/plerd.conf") };
        }
    } continue {
        my $new_path = $config_path->parent;
        die "Could not find plerd.conf in " . Path::Class::Dir->new($FindBin::Bin, '../conf') . " or in " . cwd() . " or any of its parent directories"
            if $new_path eq $config_path;
        $config_path = $new_path;
    }
}

foreach (qw( base_uri image ) ) {
    unless ( ref $config_ref->{ $_ } ) {
        $config_ref->{ $_ } = URI->new ( $config_ref->{ $_ } );
    }
}

my $plerd = Plerd->new( $config_ref );

if ( $rebuild_webmentions ) {
    for my $post ( @{ $plerd->posts } ) {
        for my $wm ( values %{$post->webmentions_by_source} ) {
            $wm->verify;
            sleep 1;
        }
        $post->serialize_webmentions;
    }
}

my $new_webmentions_were_added;
if ( $process_webmentions ) {
    $new_webmentions_were_added = $plerd->webmention_queue->process;
}

# Proceed to republish all posts (and possibly send out webmentions) only if
# we're run without the "process-webmentions" flag, or we are processing
# received webmentions and found some new ones to publish.
unless ( $new_webmentions_were_added or !$process_webmentions ) {
    exit;
}

$plerd->publish_all;

if ( $webmention_enabled ) {
    print "Sending webmentions for all posts!\n";
    for my $post ( @{ $plerd->posts } ) {
        print $post->source_file . "...\n";
        my $report = $post->send_webmentions;
        print "$report->{attempts} attempts, "
              . "$report->{sent} sent, "
              . "$report->{delivered} delivered.\n";
    }
}

=head1 NAME

plerdall - Publish an entire Plerd blog from source

=head1 SYNOPSIS

In /path/to/plerd/conf/plerd.conf:

 base_uri: http://blog.example.com path: /home/me/Dropbox/plerd title:
 My Lovely Blog

And then, on the command line, while in the top-level plerd directory:

 bin/plerdall

=head1 DESCRIPTION

This script directs Plerd to completely publish a blog, once, based
configuration. If the blog's already been published, then it'll get
wholly and freshly republished.

For instructions on installing and using Plerd, please see the README
file that should have accompanied this distribution. It is also
available online at L<https://github.com/jmacdotorg/plerd#plerd>.

=head1 OPTIONS

All of these Webmention-related options are B<experimental>.

=head2 send-webmentions

 bin/plerdall --send-webmentions

After publishing all the blog's posts, Plerd will then
direct every post to scan itself for hyperlinks and attempt to send
webmentions to each one.

=head2 process-webmentions

 bin/plerdall --process-webmentions

Before publishing all the blog's posts, Plerd will
check to see if any new webmentions are waiting in its webmention-inbox.
If so, it will process those webmentions. Then, if at least one of those
received webmentions is valid, Plerd will republish all the blog's
posts. If neither of the prior conditions are true, Plerd will not
republish the blog.

This flag makes plerdall suitable for use as a scheduled task, via e.g.
cron.

=head2 rebuild-webmentions

 bin/plerdall --rebuild-webmentions

Before publishing all the blog's posts, Plerd will re-verify every valid
webmention that the blog has received and stored over its history,
overwriting its old webmention database with the results. Then it will
republish all the blog's posts.

The script rate-limits itself to one verification request per second, so
this might take a while.

This is a utility function intended for use if the serialization format
for Plerd's webmentions changes. You probably won't need to use it
often, if ever.

=head1 SEE ALSO

=over

=item *

L<Plerd>

=back

=head1 AUTHOR

Jason McIntosh <jmac@jmac.org>
